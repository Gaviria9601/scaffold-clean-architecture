package co.com.bancolombia.s3;

import org.springframework.stereotype.Component;
import lombok.RequiredArgsConstructor;
import software.amazon.awssdk.core.ResponseBytes;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

import java.io.File;
import java.io.InputStream;
import java.util.List;

@Component
{{#lombok}}
@RequiredArgsConstructor
{{/lombok}}
public class S3Operations {

    private final S3Client s3Client;
    private final S3ConnectionProperties properties;

{{^lombok}}
    public S3Adapter(S3Client s3Client ) {
    this.s3Client = s3Client;
    }
{{/lombok}}

    public void uploadObject(String objectKey, byte[] fileContent) {
        s3Client.putObject(configurePutObject(objectKey),
                RequestBody.fromBytes(fileContent));
    }

    public void uploadObject(String objectKey, String fileContent) {
        s3Client.putObject(configurePutObject(objectKey),
                RequestBody.fromString(fileContent));
    }

    public void uploadObject(String objectKey, File fileContent) {
        s3Client.putObject(configurePutObject(objectKey),
                RequestBody.fromFile(fileContent));
    }

    public List<S3Object> listBucketObjects(){
        ListObjectsRequest listObjects = ListObjectsRequest
                .builder()
                .bucket(properties.getBucketName())
                .build();

        return s3Client.listObjects(listObjects).contents();
    }

    public InputStream getObject(String objectKey) {

        GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                .key(objectKey)
                .bucket(properties.getBucketName())
                .build();

        ResponseBytes<GetObjectResponse> objectBytes = s3Client.getObjectAsBytes(getObjectRequest);
        return objectBytes.asInputStream();
    }

    public void deleteObject(String objectKey) {
        DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()
                .key(objectKey)
                .bucket(properties.getBucketName()).build();
        s3Client.deleteObject(deleteObjectRequest);
    }

    private PutObjectRequest configurePutObject(String objectKey) {
        return PutObjectRequest.builder()
                .bucket(properties.getBucketName())
                .key(objectKey)
                .build();
    }

}